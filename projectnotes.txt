Title of Project:
-Scale Navigator

Libraries
-Node.js, Express, TypeScript, nodemon, ejs

Project description:
-Build a web app to select musical chords and recommend scales.

Bash commands
npm run build
run npm devStart
run npm start
npx tailwindcss -i ./src/input.css -o ./src/output.css --watch


----------------------------------------------------------------------------------------------------
Notes

-07_09_24
Created project folder,
Ran bash npm init -y,
Ran bash npm i express,
Ran bash  npm install --save-dev typescript @types/node @types/express ts-node,
Created src folder,
Created index.ts in src folder,
Created tsconfig.js in root of project folder,
Created server.ts in src folder,
Created the folder dist,
Updated package.json script key "script": { "start": ts-node src/server.ts", "build: "tsc", "server": node dist/server.js" },
Updated server.ts with import statement for express and defined const app = express(),
Updated server.ts with app.use(express.json()) method call,
Updated server.ts with app.get('/', (req: Request, res: Response) => { res.send('Hello World Scale Navigator')}),
Updated server.ts with app.listen(port, () => { console.log(`Server is running on http://localhost:${port}`)},
Ran bash npm start and verfied in console Server is running on http://localhost:3000,


-07_11_24
Ran bash npm i nodemon,

-07_12_24
Ran bash npm i ejs,
Updated package.json script key "devStart": "nodemon --watch 'src/**/*.ts' --exec 'ts-node' src/server.ts",
Ran bash npm i --save-dev ts-node-dev,
Updated package.json "scripts": key with "devStart": "ts-node-dev --respawn --transpile-only src/server.ts",

-07_16_24
Ran bash i --save-dev @types/ejs,
Updated src/server.ts added app.set('view engine', 'ejs');,
Created src/views folder,
Created src/views/index.ejs,
Updated src/views/index.ejs with HTML boilerplate,
Updated src/server.ts with app.set('views', path.join(__dirname, 'views'));,
Updated src/server.ts with app.get() {    res.render('index', { title: 'Hello World Scale Navigator' });},

-07_18_24
Ran bash -D tailwindcss,
npx tailwindcss init,
Updated tailwind.config.js content: [] array with ./src/**/*.{html,js,ts,tsx}",
Created src/input.css  with the directives @tailwind base; @tailwind components; @tailwind utilties;,
Ran bash npx tailwindcss -i ./src/input.css -o ./src/output.css --watch,
Updated src/server.ts app.use(express.static(path.join(__dirname, '../src')));,
Updated src/views/index.ejs <link> element to <link rel="stylesheet" href="/output.css">,
Updated src/views/index.ejs with <script> element,
Updated src/views/index.ejs with canvas element,

-07_19_24
Updated src/views/index.ejs with new <script> element to fix white key spacing bug,

-07_22_24
Created src/drawkeyboard.ts,
Updated src/views/index.ejs with a <script> element to the drawkeyboard.ts,
Updated tsconfig.json with key "rootDir": "./src",
Updated dist/drawkeyboard.ts with type asserition to set the const canvas as HTMLCanvasElement | null,
Updated dist/drawkeyboard.ts with early returns and if(!canvas) and if(!ctx) to resolve bugs,
Updated src/views/index.ejs removed <script> element and backed up to notes,

-07_23_24
Updated src/views/index.ejs <style> element body rule with flex-direction: column, align-items: center,
Updated src/views/index.ejs <canvas> element attribute properties width="350" and height="100",
Updated src/drawkeyboard.ts const white and black key definition whiteKeyWidth = 350 / 14, whiteKeyHeight = 100, blackKeyWidth = whiteKeyHeight * 0.6, blackKeyHeight = whiteKeyHeight * 0.6,
Ran bash git init,
Created .gitignore,
Ran bash git remote add origin https://github.com/emprexvest/ScaleNavigator.git,
Updated .gitignore with node_modules/,
Ran bash git remote -v,
Ran bash git push -u origin main,
Ran bash git rm -r --cached node_modules/,
Ran bash git commit -m "Remove node_modules from tracking",
Ran bash git push,
Updated tailwind.config.js to include extend: key with animation properties and keyframe properties,
Updated src/drawkeyboard.ts const keyElements: {[key: number]: { type: string, x: number, width: number } } = {};,
Updated src/drawkeyboard.ts for() { const x = whiteKeyIndex * whiteKeyWidth },
Updated src/drawkeyboard.ts for() { keyElements[i] = { type: 'white', x, width: whiteKeyHeight } },
Updated src/drawkeyboard.ts for() { const x = whiteKeyIndex * whiteKeyWidth - blackKeyWidth / 2;},
Updated src/drawkeyboard.ts for() {  ctx.fillRect(x, 0, blackKeyWidth, blackKeyHeight); }},
Updated src/drawkeyboard.ts for() { keyElements[i] = { type: 'black', x, width: blackKeyWidth }; },
Updated tsconfig.json with a new key  "lib": ["dom", "ES6"],
Updated src/drawkeyboard.ts added canvas.addEventListener() {for (){if () } else if {}},
Updated src/drawkeyboard.ts function highlightKey() { create a div and animation, including setTimeout method to remove div},
Updated src/drawkeyboard.ts function highlightKey()  document.body.appendChild(highlight);,
Updated src/views/index.ejs added <div class="canvas-container"> to nest <canvas> element,
Updated src/views/index.ejs <style> .canvas-container { position: relative; },
Updated src/drawkeyboard.ts function highlightKey(x: number, y: number, width: number, height: number, canvasLeft: number, canvasTop: number) { highlight.style.left = `${canvasLeft + x}px`; highlight.style.top = `${canvasTop + y}px`;,

-07_24_24
Created src/views/dropdownmenu.ejs
Updated src/views/dropdownmenu.ejs created <div> with nested <label> and <select>, with nested <option>,
Updated src/views/dropdownmenu.ejs added Tailwind CSS classes for styling the dropdown menus,
Updated src/views/index.ejs with a <div> and an EJS <%- include(dropdownmenu) %>,

-07_25_24
Updated src/drawkeyboard.ts with const noteSelect and const chordTypeSelect,
Updated src/drawkeyboard.ts if() error handling with (!noteSelect || !chordTypeSelect),
Updated src/drawkeyboard.ts function highlightKey() argument type asserition (isTemporary: boolean),
Updated src/drawkeyboard.ts canvas.addEventListener('click') for() nested if() arguments body highlightKey() method with new isTemporary parameter value of true,
Updated src/drawkeyboard.ts if else logic to nest the setTimeout() method and else, with a nested if(ctx) to change the ctx.fillStyle = 'red';, .fillRect(), strokeRect(),
Updated src/drawkeyboard.ts function highlightScale(note:string, chordType: string) {} with a error checking for null ctx and canvas elements,
Updated src/drawkeyboard.ts function highlightScale() ctx.clearRect(),
Updated src/drawkeyboard.ts function highlightScale() if() to redraw the keyboard,
Updated src/drawkeyboard.ts function highlightScale() const noteIndices = { 'C': 0, ... },
Updated src/drawkeyboard.ts function highlightScale() const majorScalePattern = [0, 2, 4, 5, 7, 9, 11],
Updated src/drawkeyboard.ts function highlightScale() const startIndex = noteIndices[note as keyof typeof noteIndices];,
Updated src/drawkeyboard.ts majorScalePattern.forEach(interval => { const keyIndex = (startIndex + interval) % 12; const x = keyElements[keyIndex].x; const width = keyElements[keyIndex].width; const height = keyElements[keyIndex].type === 'white' ? whiteKeyHeight : blackKeyHeight;);

-07_26_24
Updated src/drawkeyboard.ts Added comment // Reset value to 0,
Updated src/drawkeyboard.ts function highlightKey console.log(`Highlighting key at position (${x}, ${y}), size (${width}x${height}), temporary: ${isTemporary}`);,
Updated src/drawkeyboard.ts function highlightScale console.log(`Highlighting scale for note: ${note}, chord type: ${chordType}`);,
Updated src/drawkeyboard.ts function highlightScale  console.log(`Start index for note ${note}: ${startIndex}`);,
Updated src/drawkeyboard.ts majorScalePattern.forEach() console.log(`Highlighting key index: ${keyIndex}, x: ${x}, width: ${width}, height: ${height}`);,
Updated src/drawkeyboard.ts majorScalePattern.forEach() noteSelect.addEventListener() { const note = noteSelect.value; const chordType = chordTypeSelect.value; highlightScale(note, chordType);});,
Updated src/drawkeyboard.ts majorScalePattern.forEach() chordTypeSelect.addEventListener() { const note = noteSelect.value; const chordType = chordTypeSelect.value; highlightScale(note, chordType);});,





---------------------------------------------------------------------

Backup of code

-07_19_24

<script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('piano');
            const ctx = canvas.getContext('2d');

            const whiteKeyWidth = 50;
            const whiteKeyHeight = 200;
            const blackKeyWidth = 30;
            const blackKeyHeight = 120;

            const keys = [
                'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B',
                'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'
            ];

            // Draw white keys
            for (let i = 0; i < keys.length; i++) {
                if (!keys[i].includes('#')) {
                    ctx.fillStyle = 'white';
                    ctx.fillRect(i * whiteKeyWidth / 2, 0, whiteKeyWidth, whiteKeyHeight);
                    ctx.strokeRect(i * whiteKeyWidth / 2, 0, whiteKeyWidth, whiteKeyHeight);
                }
            }

            // Draw black keys
            for (let i = 0; i < keys.length; i++) {
                if (keys[i].includes('#')) {
                    ctx.fillStyle = 'black';
                    ctx.fillRect((i - 1) * whiteKeyWidth / 2 + whiteKeyWidth - blackKeyWidth / 2, 0, blackKeyWidth, blackKeyHeight);
                }
            }
        });
    </script>

-07_22_24
<script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('piano');
            const ctx = canvas.getContext('2d');

            const whiteKeyWidth = 50;
            const whiteKeyHeight = 200;
            const blackKeyWidth = 30;
            const blackKeyHeight = 120;

            const keys = [
                'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B',
                'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'
            ];

            let whiteKeyIndex = 0;

            // Draw white keys
            for (let i = 0; i < keys.length; i++) {
                if (!keys[i].includes('#')) {
                    ctx.fillStyle = 'white';
                    ctx.fillRect(whiteKeyIndex * whiteKeyWidth, 0, whiteKeyWidth, whiteKeyHeight);
                    ctx.strokeRect(whiteKeyIndex * whiteKeyWidth, 0, whiteKeyWidth, whiteKeyHeight);
                    whiteKeyIndex++;
                }
            }

            whiteKeyIndex = 0;

            // Draw black keys
            for (let i = 0; i < keys.length; i++) {
                if (!keys[i].includes('#')) {
                    whiteKeyIndex++;
                } else {
                    ctx.fillStyle = 'black';
                    ctx.fillRect(whiteKeyIndex * whiteKeyWidth - blackKeyHeight / 2, 0, blackKeyWidth, blackKeyHeight);
                }
            }
        });
    </script>